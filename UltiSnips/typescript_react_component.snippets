extends typescript

snippet reactcomp "Create react class component with typescript"
import React, {ReactElement} from 'react'

interface ComponentNameProps {
  propName: string
}

interface ComponentNameState {
  stateName: string
}

class `!v expand('%:t:r')` extends React.Component<
  ComponentNameProps,
  ComponentNameState
> {
  /***************************************************************************
   *  static properties and methods
   **************************************************************************/

  static defaultProps = {
    // TODO
  }

  constructor(props: ComponentNameProps) {
    super(props)

    this.state = {
      stateName: 'TODO',
    }

    // bind this
    this.nameMethod = this.nameMethod.bind(this)
  }

  render(): ReactElement {
    return <div />
  }

  /***************************************************************************
   *  custom methods
   **************************************************************************/

  nameMethod():void {
    // TODO
  }

  /***************************************************************************
   * lifecycle methods
   **************************************************************************/

  // componentDidMount() {}

  // componentDidUpdate(prevProps, prevState, snapshot) {}

  // componentWillUnmount() {}

  /* rarely used lifecycle methods */

  // static getDerivedStateFromProps(props, state) {}

  // shouldComponentUpdate(nextProps, nextState) {}

  // getSnapshotBeforeUpdate(prevProps, prevState) {}

  /* error boundaries */

  // static getDerivedStateFromError(error) {}

  // componentDidCatch(error, info) {}

  /* legacy lifecycle methods */

  // UNSAFE_componentWillMount() {}

  // UNSAFE_componentWillReceiveProps(nextProps) {}

  // UNSAFE_componentWillUpdate(nextProps, nextState) {}
}

export default `!v expand('%:t:r')`
endsnippet

snippet reactpure "Create react pure component with typescript"
import React, {ReactElement} from 'react'

interface ComponentNameProps {
  propName: string
}

interface ComponentNameState {
  stateName: string
}

class `!v expand('%:t:r')` extends React.PureComponent<
  ComponentNameProps,
  ComponentNameState
> {
  /***************************************************************************
   *  static properties and methods
   **************************************************************************/

  static defaultProps = {
    // TODO
  }

  constructor(props: ComponentNameProps) {
    super(props)

    this.state = {
      stateName: 'TODO',
    }

    // bind this
    this.nameMethod = this.nameMethod.bind(this)
  }

  render():ReactElement {
    return <div />
  }

  /***************************************************************************
   * lifecycle methods
   **************************************************************************/

  nameMethod(): void {
    // TODO
  }

  /***************************************************************************
   * lifecycle methods
   **************************************************************************/

  // componentDidMount() {}

  // componentDidUpdate(prevProps, prevState, snapshot) {}

  // componentWillUnmount() {}

  /* rarely used lifecycle methods */

  // static getDerivedStateFromProps(props, state) {}
  // shouldComponentUpdate(nextProps, nextState) {}
  // getSnapshotBeforeUpdate(prevProps, prevState) {}

  /* error boundaries */

  // static getDerivedStateFromError(error) {}

  // componentDidCatch(error, info) {}

  /* legacy lifecycle methods */

  // UNSAFE_componentWillMount() {}

  // UNSAFE_componentWillReceiveProps(nextProps) {}

  // UNSAFE_componentWillUpdate(nextProps, nextState) {}
}

export default `!v expand('%:t:r')`
endsnippet

snippet reacthook "Create react hook component with typescript"
import React, { ReactElement, useEffect } from 'react'
import { useSelector, useDispatch, shallowEqual } from 'react-redux'
import styles from './`!v expand('%:t:r')`.module.scss'
import { fetchData } from '../sliceName'
import { RootState } from 'src/pages/home/store/rootReducer'

export interface `!v expand('%:t:r')`Props {
  propName: string
}

interface `!v expand('%:t:r')`State {
  stateName: string
}

function `!v expand('%:t:r')`(props: `!v expand('%:t:r')`Props): ReactElement {
  // 获取数据
  const dispatch = useDispatch()

  useEffect(() => {
    dispatch(fetchData({}))
  }, [])

  // 绑定数据
  const { data } = useSelector((state: RootState) => {
    return {
      data: state.sliceName.data,
    }
  }, shallowEqual)

  // TODO

  return <div className={styles.container}></div>
}

export default `!v expand('%:t:r')`
endsnippet
